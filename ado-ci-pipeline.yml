trigger:
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master
    - feature*
pool:
  vmImage: ubuntu-latest

variables:
 - group: domo-api-variables
 - name: BuildConfiguration
   value: "Release"

stages:
- stage: CI_Build_Stage
  displayName: CI Build Stage
  jobs:
  - job: BuildJob
    displayName: Build Job

    steps:
    - task: UseDotNet@2
      displayName: Use .Net 6.x
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - task: DotNetCoreCLI@2
      displayName: 'DotNet Restore Before Build'
      inputs:
        command: 'restore'
        projects: '**/DemoAPI/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build with $(buildConfiguration) configuration"
      inputs:
        command: 'build'
        arguments: '--no-restore'
        projects: '**/DemoAPI/*.csproj'

  - job: TestJob
    displayName: Test Job
    dependsOn: BuildJob
    #condition: succeeded('build_job')
    steps:
    - task: UseDotNet@2
      displayName: Use .Net 6.x
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - task: DotNetCoreCLI@2
      displayName: 'DotNet Restore Before Unit Test'
      inputs:
        command: 'restore'
        projects: '**/DemoAPI.Test/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Unit Test'
      inputs:
        command: 'test'
        arguments: '--no-restore'
        projects: '**/DemoAPI.Test/*.csproj'
        publishTestResults: true

  - job: BuildAndPushDockerImageJob
    displayName: Build & Push Docker Image Job
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) 
    steps:
    - task: UseDotNet@2
      displayName: Use .Net 6.x
      inputs:
        packageType: 'sdk'
        version: '6.x'    
    # - task: Docker@2
    #   displayName: Login to ACR
    #   inputs:
    #     command: login
    #     containerRegistry: $(Docker-Hub-Service-Connection)
    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        containerRegistry: $(Docker-Hub-Service-Connection)
        repository: $(Docker-Hub-Repository-Name) # username/contosoRepository for DockerHub
        Dockerfile: '**/DemoAPI/Dockerfile'
        buildContext: $(Build.Repository.LocalPath)
        tags: $(Build.BuildId)

    # - task: Docker@2
    #   displayName: Build & Push DemoAPI Image to ACR
    #   inputs:
    #     containerRegistry: AcrServiceConnectionDemoAPI
    #     repository: 'Demo-api'
    #     command: buildAndPush
    #     Dockerfile: '**/DemoAPI/Dockerfile'
    #     buildContext: $(Build.Repository.LocalPath)
    #     tags: $(Build.BuildId)